/**
 * Callback and Related APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.000.19.004
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CallbackIdParms', 'model/CallbackResponse500', 'model/CancelCallbackResponse200', 'model/CancelCallbackResponse400', 'model/CancelCallbackResponse404', 'model/CreateCallbackParms', 'model/CreateCallbackResponse200', 'model/CreateCallbackResponse400', 'model/CreateCallbackResponse429', 'model/GetCallbackResponse200', 'model/GetCallbackResponse400', 'model/GetCallbackResponse404'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CallbackIdParms'), require('../model/CallbackResponse500'), require('../model/CancelCallbackResponse200'), require('../model/CancelCallbackResponse400'), require('../model/CancelCallbackResponse404'), require('../model/CreateCallbackParms'), require('../model/CreateCallbackResponse200'), require('../model/CreateCallbackResponse400'), require('../model/CreateCallbackResponse429'), require('../model/GetCallbackResponse200'), require('../model/GetCallbackResponse400'), require('../model/GetCallbackResponse404'));
  } else {
    // Browser globals (root is window)
    if (!root.CallbackAndRelatedApIs) {
      root.CallbackAndRelatedApIs = {};
    }
    root.CallbackAndRelatedApIs.CallbacksApi = factory(root.CallbackAndRelatedApIs.ApiClient, root.CallbackAndRelatedApIs.CallbackIdParms, root.CallbackAndRelatedApIs.CallbackResponse500, root.CallbackAndRelatedApIs.CancelCallbackResponse200, root.CallbackAndRelatedApIs.CancelCallbackResponse400, root.CallbackAndRelatedApIs.CancelCallbackResponse404, root.CallbackAndRelatedApIs.CreateCallbackParms, root.CallbackAndRelatedApIs.CreateCallbackResponse200, root.CallbackAndRelatedApIs.CreateCallbackResponse400, root.CallbackAndRelatedApIs.CreateCallbackResponse429, root.CallbackAndRelatedApIs.GetCallbackResponse200, root.CallbackAndRelatedApIs.GetCallbackResponse400, root.CallbackAndRelatedApIs.GetCallbackResponse404);
  }
}(this, function(ApiClient, CallbackIdParms, CallbackResponse500, CancelCallbackResponse200, CancelCallbackResponse400, CancelCallbackResponse404, CreateCallbackParms, CreateCallbackResponse200, CreateCallbackResponse400, CreateCallbackResponse429, GetCallbackResponse200, GetCallbackResponse400, GetCallbackResponse404) {
  'use strict';

  /**
   * Callbacks service.
   * @module api/CallbacksApi
   * @version 3.0.000.19.004
   */

  /**
   * Constructs a new CallbacksApi. 
   * @alias module:api/CallbacksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a new callback.
     * Initiates a callback request.
     * @param {String} xApiKey API Key
     * @param {module:model/CreateCallbackParms} body Callback properties.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCallbackResponse200} and HTTP response
     */
    this.bookCallbackExternalWithHttpInfo = function(xApiKey, body) {
      var postBody = body;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling bookCallbackExternal");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bookCallbackExternal");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-api-key': xApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCallbackResponse200;

      return this.apiClient.callApi(
        '/callbacks/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a new callback.
     * Initiates a callback request.
     * @param {String} xApiKey API Key
     * @param {module:model/CreateCallbackParms} body Callback properties.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCallbackResponse200}
     */
    this.bookCallbackExternal = function(xApiKey, body) {
      return this.bookCallbackExternalWithHttpInfo(xApiKey, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancels an existing callback.
     * Cancels an existing callback by its callback ID.
     * @param {String} xApiKey API Key. For example,  Z2y9eiTiQZ4ceKNpxy1YAarhpvxJXPCj4rFrbVep
     * @param {module:model/CallbackIdParms} body Callback properties.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CancelCallbackResponse200} and HTTP response
     */
    this.cancelCallbackWithHttpInfo = function(xApiKey, body) {
      var postBody = body;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling cancelCallback");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cancelCallback");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-api-key': xApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CancelCallbackResponse200;

      return this.apiClient.callApi(
        '/callbacks/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Cancels an existing callback.
     * Cancels an existing callback by its callback ID.
     * @param {String} xApiKey API Key. For example,  Z2y9eiTiQZ4ceKNpxy1YAarhpvxJXPCj4rFrbVep
     * @param {module:model/CallbackIdParms} body Callback properties.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CancelCallbackResponse200}
     */
    this.cancelCallback = function(xApiKey, body) {
      return this.cancelCallbackWithHttpInfo(xApiKey, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Queries an existing callback.
     * Queries an existing callback by its callback ID.
     * @param {String} xApiKey API Key
     * @param {module:model/CallbackIdParms} body Callback properties.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCallbackResponse200} and HTTP response
     */
    this.queryCallbackByIdWithHttpInfo = function(xApiKey, body) {
      var postBody = body;

      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling queryCallbackById");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling queryCallbackById");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-api-key': xApiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCallbackResponse200;

      return this.apiClient.callApi(
        '/callbacks/retrieve', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Queries an existing callback.
     * Queries an existing callback by its callback ID.
     * @param {String} xApiKey API Key
     * @param {module:model/CallbackIdParms} body Callback properties.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCallbackResponse200}
     */
    this.queryCallbackById = function(xApiKey, body) {
      return this.queryCallbackByIdWithHttpInfo(xApiKey, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
